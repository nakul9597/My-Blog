<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/My-Blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/My-Blog/" rel="alternate" type="text/html" /><updated>2019-08-21T00:29:28+05:30</updated><id>http://localhost:4000/My-Blog/</id><title type="html">My Blog</title><subtitle></subtitle><entry><title type="html">GSoC Acceptance</title><link href="http://localhost:4000/My-Blog/gsoc/acceptance" rel="alternate" type="text/html" title="GSoC Acceptance" /><published>2019-05-07T00:00:00+05:30</published><updated>2019-05-07T00:00:00+05:30</updated><id>http://localhost:4000/My-Blog/gsoc/GSoC-Acceptance</id><content type="html" xml:base="http://localhost:4000/My-Blog/gsoc/acceptance">&lt;p&gt;I have got selected in &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GSoC&lt;/code&gt;&lt;/a&gt; program to contribute to the Ruby organisation. Gsoc is a summer internship only for students. It is an initiative started and sponsored by Google to get more developers to contribute to open-source. If selected to participate in GSoC, one has to complete an open-source project within a duration of around 4 months. There are many &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;organisations&lt;/code&gt;&lt;/a&gt; that are available to choose from in different categories based on your interest.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Steps to participate in gsoc:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Select an organisation or multiple (your wish)&lt;/li&gt;
    &lt;li&gt;View their idea list (you can also come up with your own idea also)&lt;/li&gt;
    &lt;li&gt;Choose a project which you like to work on&lt;/li&gt;
    &lt;li&gt;Contact the mentor to understand more about the project and handle any queries&lt;/li&gt;
    &lt;li&gt;Write and submit a draft of how you plan to solve the project with timeline breakdowns&lt;/li&gt;
    &lt;li&gt;While waiting for that result try to start contributing to the organisation&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;P.S - Contribute to open-source even if you don’t get through&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below is the story of how I got into GSoC (only read if you are too bored):&lt;/p&gt;

&lt;p&gt;I had looking into GSoC last year and was too late to try and apply. I did however find a good project and email the mentor about that project but with no luck. So then I thought I’ll apply next year. With other things were happening in my life I totally forgot about it. Three days before the final day to submit a draft for GSoC this year my friend happened to mention that he was trying to participate. I felt really bad that I didn’t look at it sooner and thought that I was not going to be able to participate this year as well.&lt;/p&gt;

&lt;p&gt;I just glanced at organisations that I thought I could participate in and found so many that had many interesting projects. I decided to go with &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/5542255322988544/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;&lt;/a&gt; because I know that language the most and had used rails a little before.&lt;/p&gt;

&lt;p&gt;The lucky thing happened when I was trying to contact the mentor for some project. I didn’t know how to contact them on bundler slack so I put up a message saying I was interested in participating in GSoC for so and so project and would like to talk to the mentor. Since I was short on time I decided to send personal messages (which I later learnt is not a good practice) to members who were frequently replying to other questions. Although I did end by finding the mentor, I ended up talking to another mentor( who I thought was a participant). As soon as I found out he was a mentor I asked him what projects he was overseeing. He suggested that I look into &lt;a href=&quot;https://github.com/rubygsoc/rubygsoc/wiki/Ideas-for-RubyGems#recursive-tree-view-for-gem-dependencies-deciduous_tree&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this project idea&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project seemed very interesting and I became a little confident that I’ll be able to finish it as it had ruby and rails. I immediately started writing a draft on how I was planning to solve the project. My next blog will probably be the draft I submitted. Anyways, I submitted it and got selected for participating in 2019 GSoC. A very happy moment in my life.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have got selected in GSoC program to contribute to the Ruby organisation. Gsoc is a summer internship only for students. It is an initiative started and sponsored by Google to get more developers to contribute to open-source. If selected to participate in GSoC, one has to complete an open-source project within a duration of around 4 months. There are many organisations that are available to choose from in different categories based on your interest.</summary></entry><entry><title type="html">Ruby conversion of rpi_gpio</title><link href="http://localhost:4000/My-Blog/ruby/raspberrypi" rel="alternate" type="text/html" title="Ruby conversion of rpi_gpio" /><published>2018-08-22T00:00:00+05:30</published><updated>2018-08-22T00:00:00+05:30</updated><id>http://localhost:4000/My-Blog/ruby/Ruby-Raspberrypi-GPIO</id><content type="html" xml:base="http://localhost:4000/My-Blog/ruby/raspberrypi">&lt;p&gt;This post is going to be about a ruby gem I found for raspberry pi 3 devices. Most of the raspberry pi 3 users who work on ruby use a gem called &lt;a href=&quot;https://github.com/jwhitehorn/pi_piper&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pi_piper&lt;/code&gt;&lt;/a&gt;. For those who have worked on python and used &lt;code class=&quot;highlighter-rouge&quot;&gt;rpi_gpio&lt;/code&gt; as their main package for controlling I/O pins of the device might find it hard to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pi_piper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This gem &lt;a href=&quot;https://github.com/ClockVapor/rpi_gpio&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rpi_gpio&lt;/code&gt;&lt;/a&gt; is the ruby conversion of &lt;a href=&quot;https://sourceforge.net/projects/raspberry-gpio-python/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rpi_gpio&lt;/code&gt;&lt;/a&gt; python module. It works just like how to python module works and so the syntax is very similar. I’m not very sure whether it can used in big applications because the python module is not suggested to be used in time critical applications. This is because we can’t predict when python will be busy collecting garbage. Ruby uses a different garbage collection technique and so this gem might be more efficient.&lt;/p&gt;

&lt;p&gt;For example: Code for blinking two LED devices alternatively in the ports 17 and 18 of the raspberry pi 3 device.&lt;/p&gt;

&lt;p&gt;Python:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BCM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Blink_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rpi_gpio'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_numbering&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bcm&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_high&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_low&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_low&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_high&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_low&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can download the ruby gem &lt;a href=&quot;https://rubygems.org/gems/rpi_gpio&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;here&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post is going to be about a ruby gem I found for raspberry pi 3 devices. Most of the raspberry pi 3 users who work on ruby use a gem called pi_piper. For those who have worked on python and used rpi_gpio as their main package for controlling I/O pins of the device might find it hard to use pi_piper.</summary></entry></feed>